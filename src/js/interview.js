// function b(x, y, a) {
//   arguments[2] = 10;
//   alert(a);
// }
// b(1, 2, 3); // 10
/* Пояснение: В функции b 3 аргумента, индексы которых начинаются с [0]. Таким образом, аргумент с индексом [2]  — это a. В первой строке функции третьему аргументу функции присваивается значение 10. */

// console.log(false == undefined); // false
// console.log(false == null); // false
// console.log(null == undefined); // true
/** Пояснение: == сравнивает на равенство и не проверяет идентичность типов, поэтому в третьей строке кода в консоль будет выведено значение true. */

// const numbers = [1, 2, 3, 4, 5];
// const [y] = numbers;
// console.log(y);

// Пояснение: В данном примере выполнена деструктуризация. По умолчанию переменной у присваивается значение первого элемента массива.

// <script async src="script-1.js"></script> // Время загрузки скрипта 1.5s
// <script src="script-2.js"></script> // Время загрузки скрипта 1s
// <script defer src="script-3.js"></script> // Время загрузки скрипта 3s
// <script defer src="script-4.js"></script> // Время загрузки скрипта 1.5s
// <script src="script-5.js"></script> // Время загрузки скрипта 2s
// <script async src="script-6.js"></script> // Время загрузки скрипта 1s
// <script defer src="script-7.js"></script> // Время загрузки скрипта 0.1s

/**
 Ответ:

<script src="script-2.js"></script> // Время загрузки скрипта 1s
<script async src="script-6.js"></script> // Время загрузки скрипта 1s
<script async src="script-1.js"></script> // Время загрузки скрипта 1.5s
<script src="script-5.js"></script> // Время загрузки скрипта 2s
<script defer src="script-3.js"></script> // Время загрузки скрипта 3s
<script defer src="script-4.js"></script> // Время загрузки скрипта 1.5s
<script defer src="script-7.js"></script> // Время загрузки скрипта 0.1s
Пояснение: Когда браузер загружает HTML и доходит до тега <script>...</script>, он не может продолжать строить DOM. Он должен сначала выполнить скрипт. То же самое происходит и с внешними скриптами <script src="..."></script>: браузер должен подождать, пока загрузится скрипт, выполнить его, и только затем обработать остальную страницу.

async: Порядок загрузки (кто загрузится первым, тот и сработает). Может выполниться до того, как страница полностью загрузится. Такое случается, если скрипты маленькие или хранятся в кэше, а документ достаточно большой.

defer: Порядок документа (как расположены в документе). Выполняется после того, как документ загружен и обработан (ждёт), непосредственно перед DOMContentLoaded.

Поэтому сначала исполнится скрипт 1, поскольку он первый в очереди и по скорости загрузки. Далее 2, потому что у него скорость загрузки такая же быстрая  —  1 секунда. Загрузка асинхронно — вне очереди, 3 скрипт загружается за 1,5 секунды и выполняется сразу после загрузки, затем 4 скрипт загружается в порядке очереди и по скорости 2 секунды, последние скрипты — 5, 6, 7. Они загружаются в конце и в порядке очереди размещения в DOM.

 */

let x = 3;
function fn() {
  console.log(x);
  x = 10;
  return;
  function x() {}
}

fn();
console.log(x);
x = 5;
console.log(5);

/* Пояснение:  х объявлена как функция, она всплыла и локально x = 10;
 */
